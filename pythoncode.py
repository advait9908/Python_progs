# -*- coding: utf-8 -*-
"""PythonCode.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UN2lz4N_S9WGSNMUaOJYqK6xwIa8zqrS

1. Define a string variable with your name. Print characters of odd and even position of your name
"""

#Program to find characters at odd and even positions in a name
my_name="Venkata Shankara Sai Advait Manduva"
print('   charaters in my name at')
print('   -----------------------')
print('odd position     even position')
print('------------     -------------')
for c in range(0,len(my_name)):
    if c%2==0:
        print('    ',my_name[c],end="")
    else:
         print('              ',my_name[c])

"""2. Create three variables named 'Student name', 'Course name', and 'EmailAddress'. Add 5 random values in these variables, where added values are not replaceable and print them."""

#creating variables whose values can not be changed and printing them formatted
student_name=('Richard','Ishan','Prasad','Sikh','Jain')
course_name=('Web Designing','Data Science','Cyber Security','Cloud Computing','System Designing')
email_address=('Rich@gmail.com','Ish@gmail.com','Prasad@gmail.com','Sikh@gmail.com','Jain@gmail.com')
print('Student Name     course_name      email address')
print('-----------------------------------------------')
for i in range(5):
    print(student_name[i].ljust(15),course_name[i].ljust(18),email_address[i].ljust(20))

"""3. Create a dictionary variable with three keys, which are named same as the three variables created in the previous problem. Insert the previously created three variables values in the dictionary variable and print it."""

#creating tuples to store student data for creating of dictionary
student_name=('Richard','Ishan','Prasad','Sikh','Jain')
course_name=('Web Designing','Data Science','Cyber Security','Cloud Computing','System Designing')
email_address=('Rich@gmail.com','Ish@gmail.com','Prasad@gmail.com','Sikh@gmail.com','Jain@gmail.com')
#crating dictinary with tuples as above
stu_dict={'student_name':student_name,
          'course_name':course_name,
          'email_address':email_address}

#print entire dictinary in unformatted way
print('unformatted data')
print('----------------')
print(stu_dict,'\n')

#print data with headings and formatted
print('FORMATTED DATA')
print('Student Name     course_name      email address')
print('-----------------------------------------------')
for i in range(5):
    print(stu_dict['student_name'][i].ljust(15),\
          stu_dict['course_name'][i].ljust(18),\
          stu_dict['email_address'][i].ljust(20))

print('\n\nUsing keys and values by access items in the dictionary through iteration ')

#print using keys and values by access items in the dictionary through iteration
for key, value in stu_dict.items():
    print(key,'\n-------------')
    for x in value:
        print(x.ljust(len(x)+2),end=' - ')
    print('\n\n')

"""4. Define a string variable 'energy' and assign value either 'Fossil' or 'Renewable'. Print "Natural gas" if the value of energy variable is 'Fossil' otherwise print "solar power". What will your program print if energy='Biomass '?"""

#program that will print natural gas if energy variable value is 'Fossil'
#for any other value it wlll print Solar power
#if Biogass is stored in energy, it will print Solar power
energy='Fossil'
if energy=='Fossil':
    print('Natural gas')
else:
    print('Solar power')

"""5. Print all prime numbers between 0 and 100 separated by line."""

#printing alll the prime numbers from 0 to 100 separated by lines
#loop generate numbers from 3 to 100
for n in range(3,101):
    c=True
    #loop to test whether n is prim or not and print n if prime number
    for i in range(2,n):
        if n%i==0:
            c=False
            break
    if c:
        print(n,end='-')

"""6. Is it possible to break a loop before executing for the defined number of iterations? If yes, provide an example using While loop structure. Otherwise, explain your answer (why and how)."""

#program to demonstrate mid way breaking of the iterations of a loop
#with break statement

#program that asks a string and finds out if it has more than one word

n=input('Give a string: ')
#to remove any trailing or prededing spaces
n=n.strip()
i=0
while i<len(n):
    if(n[i]==' '):
       print('the given string has at least two words\n',n[0:i],n[i:])
       break
    i=i+1
if i==len(n):
    print('the given string has a single word',n[0:])

"""7. Create functions named 'Addition', 'Multiplication', 'Division' and 'Subtraction'. These functions takes two input parameters say (x, y) and return (x+y),(x*y), (x/y) and (x-y). Call the function with (4,7) arguments and print the outputs."""

def Addition(x,y):
    return x+y
def Subtraction(x,y):
    if x>y:
        return x-y
    else:
        return y-x
def Multiplication(x,y):
    return x*y
def Division(x,y):
    return x/y

print('Sum= ',Addition(4,7))
print('Difference =',Subtraction(4,7))
print('Product= ', Multiplication(4,7))
print("Quotient = {:2.2f}".format( Division(4,7)))

"""8. Create and display a 8x8 Identity matrix and multiply it with a 8x4 Random matrix."""

#program to multiply 8 x 8 identity matrix with 8 X 4 random matrix
import numpy as np
from numpy import random

#generating 8 X 8 matrix with default zeros
i_mat=np.zeros(64).reshape(8,8)

#filling diagonal vales with 1 to make it identity matrix and printing it
for i in range(0,len(i_mat)):
        i_mat[i][i*1]=1
print('8 X x Identity matrix:')
print('---------------------\n',i_mat,'\n')

#generating 8 X 4 matrix with random numbers and printing it
r_mat=np.random.randint(32,size=(8,4))
print('8 X 4 random matrix')
print('-------------------\n',r_mat)

#Generating 8 X 4 matrix to store result of multiplying above matrices
new_mat=np.arange(32).reshape(8,4)

#multiplying the matrices
for i in range(len(i_mat)):
        for j in range(4):
                new_mat[i][j]=0
                for k in range(len(i_mat)):
                        new_mat[i][j]+=i_mat[i][k]*r_mat[k][j]

#printing the resultant matrices of the matrix multiplication
print('\n resultant matrix:')
print('-------------------\n')
print(new_mat,'\n')

print('\n formatted resultant matrix:')
print('-----------------------------\n')
for i in range(len(new_mat)):
               print('--------------------')
               print('|',end="")
               for j in range(len(new_mat[0])):
                              print("{:2d} |".format(new_mat[i][j]),end=' ')
               print('\n')
print('-------------------')

"""9. Create a 8x9 matrix, initialise with random values and print it. Now, transpose the matrix and print it. How the transposed matrix is different from original matrix?"""

#program to create 8X9 random matrix and transposing it
import numpy as np
from numpy import random

#generating 8 X 9 matrix with random values in the range of 0 to 150
i_mat=np.random.randint(151,size=(8,9))
#printing the original 8 X 0 matrix with random values
print('8X9 matrix with random values in the range of 0 to 150')
print('------------------------------------------------------')
print(i_mat,'\n')

#transposing the matrix i.e. changing rows to columns and vice verse
#and storing it in another matrix
r_mat=i_mat.T

print('\n8X9 transposed matrix')
print('---------------------')
print('\n',r_mat)

#printing formatted output
print('============================================================')
print('printing 8 X 9 formatted matrix')
print('\n   ======================================')
for r in r_mat:
    for c in r:
        print("{:5d}".format(c),end="")
    print('\n   =====================================')
    print('\n')

"""10. Expport the "PedestrianCounting.csv" file as a matrix. The row of the matrix represents data point or instance and the column represents the variable or feature. Print the number of data instances and variables present in this dataset. Calculate mean of the third variable and deduct this mean from original values of the variable. Print both original and modified values of the variable."""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
from  time import sleep
#SOLUTION USING PANDAS DATAFRAME
#reading pedestriancounting.csv into dataframe
ped_count=pd.read_csv("/content/drive/MyDrive/pedc.csv",encoding='utf8')
#converting all the rows and the columns execept the first string value column
#into numpy array
arr_ped_count=ped_count.iloc[0:,1:].to_numpy()
#printing the number of data instances i.e. rows  in the array
print('no of data instances: ',len(arr_ped_count))
#printing number of column variables in the array
print('no of variables :',len(arr_ped_count[0]))
#finding the mean of the third variable
m=np.mean(arr_ped_count[2])
#printing the mean
print('mean of the third variable: ',m)
#printing the different between mean and the individual values of third variable
#and also the third variable for only ten records
c=0
print('mean - value of third variable','value of third variable')
print('------------------------------   -----------------------')
for x in arr_ped_count:
    print('          ',str(m-x[2]).rjust(7),'                  ',str(x[2]).rjust(7))
    c=c+1
    if c>10:
        break
print('pausing for three seconds to show output produced by numpy.loadtxt() pl wait...')
sleep(5)
#==================================================================================================
#SOLUTION USING NUMPY
#reading the pedestriancounting.csv stored as pedc.csv
#and finding the number of columns in the first row
#to use it to skip first column containing string values which cannot be
#stored in numpy array
with open("/content/drive/MyDrive/pedc.csv",encoding='utf8',mode='r') as f:
    for line in f:
        cols=len(line.split(','))
        break

#loading text from csv file skipping headings and first columns using only 2 to remaining columns
s=np.loadtxt("/content/drive/MyDrive/pedc.csv",skiprows=1,delimiter=',',usecols=range(1,cols))

#printing the number of data instances i.e. rows in the array
print('no of data instances: ',len(s))

#printing number of column variables in the array
print('no of variables :',len(s[0]))

#finding and printing the mean of the third variable
m=np.mean(s[2])
print('mean of the third variable: ',m)

#printing the different between mean and the individual values of third variable
#and also the third variable
c=0
print('mean - value of third variable','value of third variable')
print('------------------------------   -----------------------')
for x in s:
    print('          ',str(m-x[2]).rjust(7),'                  ',str(int(x[2])).rjust(7))
    c=c+1
    if c>10:
        x=input('Press N to stop')
        if x.upper()== 'N':
          break
        c=0